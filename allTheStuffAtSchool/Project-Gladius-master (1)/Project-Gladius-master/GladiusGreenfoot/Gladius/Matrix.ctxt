#BlueJ class context
comment0.target=Matrix
comment0.text=\r\n\ \ \ Jama\ \=\ Java\ Matrix\ class.\r\n<P>\r\n\ \ \ The\ Java\ Matrix\ Class\ provides\ the\ fundamental\ operations\ of\ numerical\r\n\ \ \ linear\ algebra.\ \ Various\ constructors\ create\ Matrices\ from\ two\ dimensional\r\n\ \ \ arrays\ of\ double\ precision\ floating\ point\ numbers.\ \ Various\ "gets"\ and\r\n\ \ \ "sets"\ provide\ access\ to\ submatrices\ and\ matrix\ elements.\ \ Several\ methods\ \r\n\ \ \ implement\ basic\ matrix\ arithmetic,\ including\ matrix\ addition\ and\r\n\ \ \ multiplication,\ matrix\ norms,\ and\ element-by-element\ array\ operations.\r\n\ \ \ Methods\ for\ reading\ and\ printing\ matrices\ are\ also\ included.\ \ All\ the\r\n\ \ \ operations\ in\ this\ version\ of\ the\ Matrix\ Class\ involve\ real\ matrices.\r\n\ \ \ Complex\ matrices\ may\ be\ handled\ in\ a\ future\ version.\r\n<P>\r\n\ \ \ Five\ fundamental\ matrix\ decompositions,\ which\ consist\ of\ pairs\ or\ triples\r\n\ \ \ of\ matrices,\ permutation\ vectors,\ and\ the\ like,\ produce\ results\ in\ five\r\n\ \ \ decomposition\ classes.\ \ These\ decompositions\ are\ accessed\ by\ the\ Matrix\r\n\ \ \ class\ to\ compute\ solutions\ of\ simultaneous\ linear\ equations,\ determinants,\r\n\ \ \ inverses\ and\ other\ matrix\ functions.\ \ The\ five\ decompositions\ are\:\r\n<P><UL>\r\n\ \ \ <LI>Cholesky\ Decomposition\ of\ symmetric,\ positive\ definite\ matrices.\r\n\ \ \ <LI>LU\ Decomposition\ of\ rectangular\ matrices.\r\n\ \ \ <LI>QR\ Decomposition\ of\ rectangular\ matrices.\r\n\ \ \ <LI>Singular\ Value\ Decomposition\ of\ rectangular\ matrices.\r\n\ \ \ <LI>Eigenvalue\ Decomposition\ of\ both\ symmetric\ and\ nonsymmetric\ square\ matrices.\r\n</UL>\r\n<DL>\r\n<DT><B>Example\ of\ use\:</B></DT>\r\n<P>\r\n<DD>Solve\ a\ linear\ system\ A\ x\ \=\ b\ and\ compute\ the\ residual\ norm,\ ||b\ -\ A\ x||.\r\n<P><PRE>\r\n\ \ \ \ \ \ double[][]\ vals\ \=\ {{1.,2.,3},{4.,5.,6.},{7.,8.,10.}};\r\n\ \ \ \ \ \ Matrix\ A\ \=\ new\ Matrix(vals);\r\n\ \ \ \ \ \ Matrix\ b\ \=\ Matrix.random(3,1);\r\n\ \ \ \ \ \ Matrix\ x\ \=\ A.solve(b);\r\n\ \ \ \ \ \ Matrix\ r\ \=\ A.times(x).minus(b);\r\n\ \ \ \ \ \ double\ rnorm\ \=\ r.normInf();\r\n</PRE></DD>\r\n</DL>\r\n\r\n@author\ The\ MathWorks,\ Inc.\ and\ the\ National\ Institute\ of\ Standards\ and\ Technology.\r\n@version\ 5\ August\ 1998\r\n
comment1.params=m\ n
comment1.target=Matrix(int,\ int)
comment1.text=\ Construct\ an\ m-by-n\ matrix\ of\ zeros.\ \r\n\ \ \ @param\ m\ \ \ \ Number\ of\ rows.\r\n\ \ \ @param\ n\ \ \ \ Number\ of\ colums.\r\n
comment10.params=
comment10.target=double[][]\ getArray()
comment10.text=\ Access\ the\ internal\ two-dimensional\ array.\r\n\ \ \ @return\ \ \ \ \ Pointer\ to\ the\ two-dimensional\ array\ of\ matrix\ elements.\r\n
comment11.params=
comment11.target=double[][]\ getArrayCopy()
comment11.text=\ Copy\ the\ internal\ two-dimensional\ array.\r\n\ \ \ @return\ \ \ \ \ Two-dimensional\ array\ copy\ of\ matrix\ elements.\r\n
comment12.params=
comment12.target=double[]\ getColumnPackedCopy()
comment12.text=\ Make\ a\ one-dimensional\ column\ packed\ copy\ of\ the\ internal\ array.\r\n\ \ \ @return\ \ \ \ \ Matrix\ elements\ packed\ in\ a\ one-dimensional\ array\ by\ columns.\r\n
comment13.params=
comment13.target=double[]\ getRowPackedCopy()
comment13.text=\ Make\ a\ one-dimensional\ row\ packed\ copy\ of\ the\ internal\ array.\r\n\ \ \ @return\ \ \ \ \ Matrix\ elements\ packed\ in\ a\ one-dimensional\ array\ by\ rows.\r\n
comment14.params=
comment14.target=int\ getRowDimension()
comment14.text=\ Get\ row\ dimension.\r\n\ \ \ @return\ \ \ \ \ m,\ the\ number\ of\ rows.\r\n
comment15.params=
comment15.target=int\ getColumnDimension()
comment15.text=\ Get\ column\ dimension.\r\n\ \ \ @return\ \ \ \ \ n,\ the\ number\ of\ columns.\r\n
comment16.params=i\ j
comment16.target=double\ get(int,\ int)
comment16.text=\ Get\ a\ single\ element.\r\n\ \ \ @param\ i\ \ \ \ Row\ index.\r\n\ \ \ @param\ j\ \ \ \ Column\ index.\r\n\ \ \ @return\ \ \ \ \ A(i,j)\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\r\n
comment17.params=i0\ i1\ j0\ j1
comment17.target=Matrix\ getMatrix(int,\ int,\ int,\ int)
comment17.text=\ Get\ a\ submatrix.\r\n\ \ \ @param\ i0\ \ \ Initial\ row\ index\r\n\ \ \ @param\ i1\ \ \ Final\ row\ index\r\n\ \ \ @param\ j0\ \ \ Initial\ column\ index\r\n\ \ \ @param\ j1\ \ \ Final\ column\ index\r\n\ \ \ @return\ \ \ \ \ A(i0\:i1,j0\:j1)\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment18.params=r\ c
comment18.target=Matrix\ getMatrix(int[],\ int[])
comment18.text=\ Get\ a\ submatrix.\r\n\ \ \ @param\ r\ \ \ \ Array\ of\ row\ indices.\r\n\ \ \ @param\ c\ \ \ \ Array\ of\ column\ indices.\r\n\ \ \ @return\ \ \ \ \ A(r(\:),c(\:))\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment19.params=i0\ i1\ c
comment19.target=Matrix\ getMatrix(int,\ int,\ int[])
comment19.text=\ Get\ a\ submatrix.\r\n\ \ \ @param\ i0\ \ \ Initial\ row\ index\r\n\ \ \ @param\ i1\ \ \ Final\ row\ index\r\n\ \ \ @param\ c\ \ \ \ Array\ of\ column\ indices.\r\n\ \ \ @return\ \ \ \ \ A(i0\:i1,c(\:))\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment2.params=
comment2.target=java.lang.String\ toString()
comment20.params=r\ j0\ j1
comment20.target=Matrix\ getMatrix(int[],\ int,\ int)
comment20.text=\ Get\ a\ submatrix.\r\n\ \ \ @param\ r\ \ \ \ Array\ of\ row\ indices.\r\n\ \ \ @param\ j0\ \ \ Initial\ column\ index\r\n\ \ \ @param\ j1\ \ \ Final\ column\ index\r\n\ \ \ @return\ \ \ \ \ A(r(\:),j0\:j1)\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment21.params=i\ j\ s
comment21.target=void\ set(int,\ int,\ double)
comment21.text=\ Set\ a\ single\ element.\r\n\ \ \ @param\ i\ \ \ \ Row\ index.\r\n\ \ \ @param\ j\ \ \ \ Column\ index.\r\n\ \ \ @param\ s\ \ \ \ A(i,j).\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\r\n
comment22.params=i0\ i1\ j0\ j1\ X
comment22.target=void\ setMatrix(int,\ int,\ int,\ int,\ Matrix)
comment22.text=\ Set\ a\ submatrix.\r\n\ \ \ @param\ i0\ \ \ Initial\ row\ index\r\n\ \ \ @param\ i1\ \ \ Final\ row\ index\r\n\ \ \ @param\ j0\ \ \ Initial\ column\ index\r\n\ \ \ @param\ j1\ \ \ Final\ column\ index\r\n\ \ \ @param\ X\ \ \ \ A(i0\:i1,j0\:j1)\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment23.params=r\ c\ X
comment23.target=void\ setMatrix(int[],\ int[],\ Matrix)
comment23.text=\ Set\ a\ submatrix.\r\n\ \ \ @param\ r\ \ \ \ Array\ of\ row\ indices.\r\n\ \ \ @param\ c\ \ \ \ Array\ of\ column\ indices.\r\n\ \ \ @param\ X\ \ \ \ A(r(\:),c(\:))\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment24.params=r\ j0\ j1\ X
comment24.target=void\ setMatrix(int[],\ int,\ int,\ Matrix)
comment24.text=\ Set\ a\ submatrix.\r\n\ \ \ @param\ r\ \ \ \ Array\ of\ row\ indices.\r\n\ \ \ @param\ j0\ \ \ Initial\ column\ index\r\n\ \ \ @param\ j1\ \ \ Final\ column\ index\r\n\ \ \ @param\ X\ \ \ \ A(r(\:),j0\:j1)\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment25.params=i0\ i1\ c\ X
comment25.target=void\ setMatrix(int,\ int,\ int[],\ Matrix)
comment25.text=\ Set\ a\ submatrix.\r\n\ \ \ @param\ i0\ \ \ Initial\ row\ index\r\n\ \ \ @param\ i1\ \ \ Final\ row\ index\r\n\ \ \ @param\ c\ \ \ \ Array\ of\ column\ indices.\r\n\ \ \ @param\ X\ \ \ \ A(i0\:i1,c(\:))\r\n\ \ \ @exception\ \ ArrayIndexOutOfBoundsException\ Submatrix\ indices\r\n
comment26.params=
comment26.target=Matrix\ transpose()
comment26.text=\ Matrix\ transpose.\r\n\ \ \ @return\ \ \ \ A'\r\n
comment27.params=
comment27.target=double\ norm1()
comment27.text=\ One\ norm\r\n\ \ \ @return\ \ \ \ maximum\ column\ sum.\r\n
comment28.params=
comment28.target=double\ norm2()
comment28.text=\ Two\ norm\r\n\ \ \ @return\ \ \ \ maximum\ singular\ value.\r\n
comment29.params=
comment29.target=double\ normInf()
comment29.text=\ Infinity\ norm\r\n\ \ \ @return\ \ \ \ maximum\ row\ sum.\r\n
comment3.params=m\ n\ s
comment3.target=Matrix(int,\ int,\ double)
comment3.text=\ Construct\ an\ m-by-n\ constant\ matrix.\r\n\ \ \ @param\ m\ \ \ \ Number\ of\ rows.\r\n\ \ \ @param\ n\ \ \ \ Number\ of\ colums.\r\n\ \ \ @param\ s\ \ \ \ Fill\ the\ matrix\ with\ this\ scalar\ value.\r\n
comment30.params=
comment30.target=double\ normF()
comment30.text=\ Frobenius\ norm\r\n\ \ \ @return\ \ \ \ sqrt\ of\ sum\ of\ squares\ of\ all\ elements.\r\n
comment31.params=
comment31.target=Matrix\ uminus()
comment31.text=\ \ Unary\ minus\r\n\ \ \ @return\ \ \ \ -A\r\n
comment32.params=B
comment32.target=Matrix\ plus(Matrix)
comment32.text=\ C\ \=\ A\ +\ B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A\ +\ B\r\n
comment33.params=B
comment33.target=Matrix\ plusEquals(Matrix)
comment33.text=\ A\ \=\ A\ +\ B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A\ +\ B\r\n
comment34.params=B
comment34.target=Matrix\ minus(Matrix)
comment34.text=\ C\ \=\ A\ -\ B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A\ -\ B\r\n
comment35.params=B
comment35.target=Matrix\ minusEquals(Matrix)
comment35.text=\ A\ \=\ A\ -\ B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A\ -\ B\r\n
comment36.params=B
comment36.target=Matrix\ arrayTimes(Matrix)
comment36.text=\ Element-by-element\ multiplication,\ C\ \=\ A.*B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A.*B\r\n
comment37.params=B
comment37.target=Matrix\ arrayTimesEquals(Matrix)
comment37.text=\ Element-by-element\ multiplication\ in\ place,\ A\ \=\ A.*B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A.*B\r\n
comment38.params=B
comment38.target=Matrix\ arrayRightDivide(Matrix)
comment38.text=\ Element-by-element\ right\ division,\ C\ \=\ A./B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A./B\r\n
comment39.params=B
comment39.target=Matrix\ arrayRightDivideEquals(Matrix)
comment39.text=\ Element-by-element\ right\ division\ in\ place,\ A\ \=\ A./B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A./B\r\n
comment4.params=A
comment4.target=Matrix(double[][])
comment4.text=\ Construct\ a\ matrix\ from\ a\ 2-D\ array.\r\n\ \ \ @param\ A\ \ \ \ Two-dimensional\ array\ of\ doubles.\r\n\ \ \ @exception\ \ IllegalArgumentException\ All\ rows\ must\ have\ the\ same\ length\r\n\ \ \ @see\ \ \ \ \ \ \ \ \#constructWithCopy\r\n
comment40.params=B
comment40.target=Matrix\ arrayLeftDivide(Matrix)
comment40.text=\ Element-by-element\ left\ division,\ C\ \=\ A.\\B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A.\\B\r\n
comment41.params=B
comment41.target=Matrix\ arrayLeftDivideEquals(Matrix)
comment41.text=\ Element-by-element\ left\ division\ in\ place,\ A\ \=\ A.\\B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ A.\\B\r\n
comment42.params=s
comment42.target=Matrix\ times(double)
comment42.text=\ Multiply\ a\ matrix\ by\ a\ scalar,\ C\ \=\ s*A\r\n\ \ \ @param\ s\ \ \ \ scalar\r\n\ \ \ @return\ \ \ \ \ s*A\r\n
comment43.params=s
comment43.target=Matrix\ timesEquals(double)
comment43.text=\ Multiply\ a\ matrix\ by\ a\ scalar\ in\ place,\ A\ \=\ s*A\r\n\ \ \ @param\ s\ \ \ \ scalar\r\n\ \ \ @return\ \ \ \ \ replace\ A\ by\ s*A\r\n
comment44.params=B
comment44.target=Matrix\ times(Matrix)
comment44.text=\ Linear\ algebraic\ matrix\ multiplication,\ A\ *\ B\r\n\ \ \ @param\ B\ \ \ \ another\ matrix\r\n\ \ \ @return\ \ \ \ \ Matrix\ product,\ A\ *\ B\r\n\ \ \ @exception\ \ IllegalArgumentException\ Matrix\ inner\ dimensions\ must\ agree.\r\n
comment45.params=
comment45.target=LUDecomposition\ lu()
comment45.text=\ LU\ Decomposition\r\n\ \ \ @return\ \ \ \ \ LUDecomposition\r\n\ \ \ @see\ LUDecomposition\r\n
comment46.params=
comment46.target=QRDecomposition\ qr()
comment46.text=\ QR\ Decomposition\r\n\ \ \ @return\ \ \ \ \ QRDecomposition\r\n\ \ \ @see\ QRDecomposition\r\n
comment47.params=
comment47.target=CholeskyDecomposition\ chol()
comment47.text=\ Cholesky\ Decomposition\r\n\ \ \ @return\ \ \ \ \ CholeskyDecomposition\r\n\ \ \ @see\ CholeskyDecomposition\r\n
comment48.params=
comment48.target=SingularValueDecomposition\ svd()
comment48.text=\ Singular\ Value\ Decomposition\r\n\ \ \ @return\ \ \ \ \ SingularValueDecomposition\r\n\ \ \ @see\ SingularValueDecomposition\r\n
comment49.params=
comment49.target=EigenvalueDecomposition\ eig()
comment49.text=\ Eigenvalue\ Decomposition\r\n\ \ \ @return\ \ \ \ \ EigenvalueDecomposition\r\n\ \ \ @see\ EigenvalueDecomposition\r\n
comment5.params=A\ m\ n
comment5.target=Matrix(double[][],\ int,\ int)
comment5.text=\ Construct\ a\ matrix\ quickly\ without\ checking\ arguments.\r\n\ \ \ @param\ A\ \ \ \ Two-dimensional\ array\ of\ doubles.\r\n\ \ \ @param\ m\ \ \ \ Number\ of\ rows.\r\n\ \ \ @param\ n\ \ \ \ Number\ of\ colums.\r\n
comment50.params=B
comment50.target=Matrix\ solve(Matrix)
comment50.text=\ Solve\ A*X\ \=\ B\r\n\ \ \ @param\ B\ \ \ \ right\ hand\ side\r\n\ \ \ @return\ \ \ \ \ solution\ if\ A\ is\ square,\ least\ squares\ solution\ otherwise\r\n
comment51.params=B
comment51.target=Matrix\ solveTranspose(Matrix)
comment51.text=\ Solve\ X*A\ \=\ B,\ which\ is\ also\ A'*X'\ \=\ B'\r\n\ \ \ @param\ B\ \ \ \ right\ hand\ side\r\n\ \ \ @return\ \ \ \ \ solution\ if\ A\ is\ square,\ least\ squares\ solution\ otherwise.\r\n
comment52.params=
comment52.target=Matrix\ inverse()
comment52.text=\ Matrix\ inverse\ or\ pseudoinverse\r\n\ \ \ @return\ \ \ \ \ inverse(A)\ if\ A\ is\ square,\ pseudoinverse\ otherwise.\r\n
comment53.params=
comment53.target=double\ det()
comment53.text=\ Matrix\ determinant\r\n\ \ \ @return\ \ \ \ \ determinant\r\n
comment54.params=
comment54.target=int\ rank()
comment54.text=\ Matrix\ rank\r\n\ \ \ @return\ \ \ \ \ effective\ numerical\ rank,\ obtained\ from\ SVD.\r\n
comment55.params=
comment55.target=double\ cond()
comment55.text=\ Matrix\ condition\ (2\ norm)\r\n\ \ \ @return\ \ \ \ \ ratio\ of\ largest\ to\ smallest\ singular\ value.\r\n
comment56.params=
comment56.target=double\ trace()
comment56.text=\ Matrix\ trace.\r\n\ \ \ @return\ \ \ \ \ sum\ of\ the\ diagonal\ elements.\r\n
comment57.params=m\ n
comment57.target=Matrix\ random(int,\ int)
comment57.text=\ Generate\ matrix\ with\ random\ elements\r\n\ \ \ @param\ m\ \ \ \ Number\ of\ rows.\r\n\ \ \ @param\ n\ \ \ \ Number\ of\ colums.\r\n\ \ \ @return\ \ \ \ \ An\ m-by-n\ matrix\ with\ uniformly\ distributed\ random\ elements.\r\n
comment58.params=m\ n
comment58.target=Matrix\ identity(int,\ int)
comment58.text=\ Generate\ identity\ matrix\r\n\ \ \ @param\ m\ \ \ \ Number\ of\ rows.\r\n\ \ \ @param\ n\ \ \ \ Number\ of\ colums.\r\n\ \ \ @return\ \ \ \ \ An\ m-by-n\ matrix\ with\ ones\ on\ the\ diagonal\ and\ zeros\ elsewhere.\r\n
comment59.params=w\ d
comment59.target=void\ print(int,\ int)
comment59.text=\ Print\ the\ matrix\ to\ stdout.\ \ \ Line\ the\ elements\ up\ in\ columns\r\n\ with\ a\ Fortran-like\ 'Fw.d'\ style\ format.\r\n\ \ \ @param\ w\ \ \ \ Column\ width.\r\n\ \ \ @param\ d\ \ \ \ Number\ of\ digits\ after\ the\ decimal.\r\n
comment6.params=vals\ m
comment6.target=Matrix(double[],\ int)
comment6.text=\ Construct\ a\ matrix\ from\ a\ one-dimensional\ packed\ array\r\n\ \ \ @param\ vals\ One-dimensional\ array\ of\ doubles,\ packed\ by\ columns\ (ala\ Fortran).\r\n\ \ \ @param\ m\ \ \ \ Number\ of\ rows.\r\n\ \ \ @exception\ \ IllegalArgumentException\ Array\ length\ must\ be\ a\ multiple\ of\ m.\r\n
comment60.params=output\ w\ d
comment60.target=void\ print(java.io.PrintWriter,\ int,\ int)
comment60.text=\ Print\ the\ matrix\ to\ the\ output\ stream.\ \ \ Line\ the\ elements\ up\ in\r\n\ columns\ with\ a\ Fortran-like\ 'Fw.d'\ style\ format.\r\n\ \ \ @param\ output\ Output\ stream.\r\n\ \ \ @param\ w\ \ \ \ \ \ Column\ width.\r\n\ \ \ @param\ d\ \ \ \ \ \ Number\ of\ digits\ after\ the\ decimal.\r\n
comment61.params=format\ width
comment61.target=void\ print(java.text.NumberFormat,\ int)
comment61.text=\ Print\ the\ matrix\ to\ stdout.\ \ Line\ the\ elements\ up\ in\ columns.\r\n\ Use\ the\ format\ object,\ and\ right\ justify\ within\ columns\ of\ width\r\n\ characters.\r\n\ Note\ that\ is\ the\ matrix\ is\ to\ be\ read\ back\ in,\ you\ probably\ will\ want\r\n\ to\ use\ a\ NumberFormat\ that\ is\ set\ to\ US\ Locale.\r\n\ \ \ @param\ format\ A\ \ Formatting\ object\ for\ individual\ elements.\r\n\ \ \ @param\ width\ \ \ \ \ Field\ width\ for\ each\ column.\r\n\ \ \ @see\ java.text.DecimalFormat\#setDecimalFormatSymbols\r\n
comment62.params=output\ format\ width
comment62.target=void\ print(java.io.PrintWriter,\ java.text.NumberFormat,\ int)
comment62.text=\ Print\ the\ matrix\ to\ the\ output\ stream.\ \ Line\ the\ elements\ up\ in\ columns.\r\n\ Use\ the\ format\ object,\ and\ right\ justify\ within\ columns\ of\ width\r\n\ characters.\r\n\ Note\ that\ is\ the\ matrix\ is\ to\ be\ read\ back\ in,\ you\ probably\ will\ want\r\n\ to\ use\ a\ NumberFormat\ that\ is\ set\ to\ US\ Locale.\r\n\ \ \ @param\ output\ the\ output\ stream.\r\n\ \ \ @param\ format\ A\ formatting\ object\ to\ format\ the\ matrix\ elements\ \r\n\ \ \ @param\ width\ \ Column\ width.\r\n\ \ \ @see\ java.text.DecimalFormat\#setDecimalFormatSymbols\r\n
comment63.params=input
comment63.target=Matrix\ read(java.io.BufferedReader)
comment63.text=\ Read\ a\ matrix\ from\ a\ stream.\ \ The\ format\ is\ the\ same\ the\ print\ method,\r\n\ so\ printed\ matrices\ can\ be\ read\ back\ in\ (provided\ they\ were\ printed\ using\r\n\ US\ Locale).\ \ Elements\ are\ separated\ by\r\n\ whitespace,\ all\ the\ elements\ for\ each\ row\ appear\ on\ a\ single\ line,\r\n\ the\ last\ row\ is\ followed\ by\ a\ blank\ line.\r\n\ \ \ @param\ input\ the\ input\ stream.\r\n
comment64.params=B
comment64.target=void\ checkMatrixDimensions(Matrix)
comment64.text=Check\ if\ size(A)\ \=\=\ size(B)\ *
comment7.params=A
comment7.target=Matrix\ constructWithCopy(double[][])
comment7.text=\ Construct\ a\ matrix\ from\ a\ copy\ of\ a\ 2-D\ array.\r\n\ \ \ @param\ A\ \ \ \ Two-dimensional\ array\ of\ doubles.\r\n\ \ \ @exception\ \ IllegalArgumentException\ All\ rows\ must\ have\ the\ same\ length\r\n
comment8.params=
comment8.target=Matrix\ copy()
comment8.text=\ Make\ a\ deep\ copy\ of\ a\ matrix\r\n
comment9.params=
comment9.target=java.lang.Object\ clone()
comment9.text=\ Clone\ the\ Matrix\ object.\r\n
numComments=65
